<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>断桥bian的博客</title>
    <link>/</link>
    <description>Recent content on 断桥bian的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Sep 2021 03:12:33 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>生活杂谈-番茄工作法</title>
      <link>/blog/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88-%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</link>
      <pubDate>Mon, 06 Sep 2021 03:12:33 +0000</pubDate>
      
      <guid>/blog/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88-%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</guid>
      <description>生活杂谈-番茄工作法</description>
    </item>
    
    <item>
      <title>面试一</title>
      <link>/blog/%E9%9D%A2%E8%AF%95/2017-06-29-%E9%9D%A2%E8%AF%951/</link>
      <pubDate>Mon, 06 Sep 2021 03:12:33 +0000</pubDate>
      
      <guid>/blog/%E9%9D%A2%E8%AF%95/2017-06-29-%E9%9D%A2%E8%AF%951/</guid>
      <description>面试一</description>
    </item>
    
    <item>
      <title>面试二</title>
      <link>/blog/%E9%9D%A2%E8%AF%95/2017-06-29-%E9%9D%A2%E8%AF%952/</link>
      <pubDate>Mon, 06 Sep 2021 03:12:33 +0000</pubDate>
      
      <guid>/blog/%E9%9D%A2%E8%AF%95/2017-06-29-%E9%9D%A2%E8%AF%952/</guid>
      <description>面试二</description>
    </item>
    
    <item>
      <title>2019年书单</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2019-10-07-2019%E5%B9%B4%E4%B9%A6%E5%8D%95/</link>
      <pubDate>Mon, 07 Oct 2019 23:41:33 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2019-10-07-2019%E5%B9%B4%E4%B9%A6%E5%8D%95/</guid>
      <description>    2019年了，自己自我总结和反省了很长时间，发现还是需要在基础上面下功夫，所以今年还是在计算机基础方面上多花与一些时间，80%时间花在计算机基础知识的夯实，外语学习，20%时间花在自己感兴趣的其他领域，心理学，经济学（量化投资方向）。看书的话还是以英文版的为主，主要为了能同时提高英语水平。以及要开始思考怎么发展自己的副业了。书籍《梦的解析》-弗洛伊德 （done）《Learning...</description>
    </item>
    
    <item>
      <title>大数据学习笔记之Spark-优化</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2019-02-11-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bspark-%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 11 Feb 2019 15:54:38 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2019-02-11-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bspark-%E4%BC%98%E5%8C%96/</guid>
      <description>Spark优化函数传递在spark中，很多操作都需要依赖用户传递的函数，在我们传递函数的时候，如果函数中包含其他对象的饮用，Spark也会把其他对象传递。(尤其是在python中)解决方法：将函数中的必要字段转换成局部变量，然后进行传递。引用《Spark快速大数据分析》...</description>
    </item>
    
    <item>
      <title>大数据学习笔记之Spark-RDD编程</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2019-02-11-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bspark-rdd%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 11 Feb 2019 15:47:54 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2019-02-11-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bspark-rdd%E7%BC%96%E7%A8%8B/</guid>
      <description>RDD编程Spark中的核心数据操作：创建RDD转换已有的RDD调用RDD操作进行求值Note:RDD是Spark数据操作的核心，它的主要特点是操作链，惰性求值。RDD创建创建RDD主要有两种方法：读取外部数据集JavaRDD&amp;amp;amp;amp;lt;String&amp;amp;amp;amp;gt; lines = sc.textFile(&amp;amp;amp;quot;your file path&amp;amp;amp;quot;)在驱动</description>
    </item>
    
    <item>
      <title>算法-堆排序</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-12-18-%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 18 Dec 2018 17:11:43 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-12-18-%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/</guid>
      <description>堆排序思路将数组转换成一个最小堆（升序排序）/最大堆（降序排序），然后挨个删除并输出堆顶元素，并继续调整堆为最小堆（升序排序）或者 最大堆（降序排列），从而最终生成一个升序或者降序序列。算法复杂度平均复杂度为:  O(n) = nlogn，最坏情况下的算法复杂度：O(n) = nlogn;python实现## HeapSort implemented by pytho...</description>
    </item>
    
    <item>
      <title>算法-归并排序</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-12-10-%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 10 Dec 2018 21:31:34 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-12-10-%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>归并排序思路归并排序采用的是分治的思想，将一个 n 长度的数组不断的分成无数个小数组，然后对小数组进行排序，最后将所以的有序小数组合并，最终数组有序。算法复杂度    归并排序的平均复杂度： O(n) = nlogn, 最坏时间复杂度为：O(n) = nlogn算法空间复杂度    归并排序的空间复杂度： O(n) = npython实现# 递归实现import ...</description>
    </item>
    
    <item>
      <title>算法-插入排序</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-12-09-%E7%AE%97%E6%B3%95-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 09 Dec 2018 22:39:02 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-12-09-%E7%AE%97%E6%B3%95-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>插入排序思路插入排序是最直观和自然的排序，它是从左到右，将一个数从它为起始位置 loc ，从右向左，进行比较，如果 array[loc-1] &amp;amp;lt; array[loc] 或者 loc = 0 ，那么就将这个数插入 loc 位置，否则 loc 位置左移 ( loc = loc -1 )继续进行比较，直到数组有序。算法复杂度    插入排序的最坏时间复杂度为: O(n) = ...</description>
    </item>
    
    <item>
      <title>算法-冒泡排序</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-12-09-%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 09 Dec 2018 21:34:54 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-12-09-%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>冒泡排序思路模拟水中的冒泡过程, 大的水泡总是从底部不断的超过小的水泡，最终上升到水面。冒泡排序也是，从左到右,小的数不断的从右边冒泡上升到左边，最终实现有序。复杂度    冒泡排序的最坏时间复杂度为: O(n) = n^2，平均复杂度为： O(n) = n^2python实现def bubblesort(arr):    for i in range(0,len(arr...</description>
    </item>
    
    <item>
      <title>算法-纸牌游戏</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sun, 25 Nov 2018 17:44:49 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F/</guid>
      <description>纸牌游戏时间限制：1秒空间限制：32768K牛牛和羊羊正在玩一个纸牌游戏。这个游戏一共有n张纸牌, 第i张纸牌上写着数字a_i。牛牛和羊羊轮流抽牌, 牛牛先抽, 每次抽牌他们可以从纸牌堆中任意选择一张抽出, 直到纸牌被抽完。他们的得分等于他们抽到的纸牌数字总和。现在假设牛牛和羊羊都采用最优策略, 请你计算出游戏结束后牛牛得分减去羊羊得分等于多少。输入描述:输入包括两行。第...</description>
    </item>
    
    <item>
      <title>算法-翻转数列</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E7%BF%BB%E8%BD%AC%E6%95%B0%E5%88%97/</link>
      <pubDate>Sun, 25 Nov 2018 17:41:35 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E7%BF%BB%E8%BD%AC%E6%95%B0%E5%88%97/</guid>
      <description>翻转数列小Q定义了一种数列称为翻转数列:给定整数n和m, 满足n能被2m整除。对于一串连续递增整数数列1, 2, 3, 4..., 每隔m个符号翻转一次, 最初符号为&amp;#39;-&amp;#39;;。例如n = 8, m = 2, 数列就是: -1, -2, &#43;3, &#43;4, -5, -6, &#43;7, &#43;8.而n = 4, m = 1, 数列就是: -1, &#43;2, -3, &#43; 4.小Q现在希望你能帮他算算前n项和为...</description>
    </item>
    
    <item>
      <title>算法-查找数组中的前M大的数</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E6%9F%A5%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%89%8Dm%E5%A4%A7%E7%9A%84%E6%95%B0/</link>
      <pubDate>Sun, 25 Nov 2018 17:38:57 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E6%9F%A5%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%89%8Dm%E5%A4%A7%E7%9A%84%E6%95%B0/</guid>
      <description>查找数组中的前M大的数思路根据快速排序的Partition的思想，假定数组长度为n, 选定一个pivot,总能将数组分为 [0,k-1]和[k,n], 其中[0,k-1]&amp;amp;lt;pivot,[k&#43;1,n] &amp;amp;gt; pivot。如果 k = m, 那么算法结束。如果k &amp;amp;gt; m, 对[k&#43;1,n]继续进行切分,每次切分k都会减少一部分, 直到k = m, 如果k &amp;amp;lt; m, 对...</description>
    </item>
    
    <item>
      <title>算法-分块/索引查找</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E5%88%86%E5%9D%97-%E7%B4%A2%E5%BC%95%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 25 Nov 2018 17:36:04 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E5%88%86%E5%9D%97-%E7%B4%A2%E5%BC%95%E6%9F%A5%E6%89%BE/</guid>
      <description>分块/索引查找思路前提： 1.块间有序 2.块内可以无序 3.索引中保存块的起始地址，和块内的最大值或者最小值   首先对索引进行折半查找，然后对块内进行顺序查找。算法复杂度    假设一个n长度的数组分为m块，每块的长度为： n/m, 那么算法的平均复杂度：O(n) = logm&#43;n/m, 算法最坏情况下的复杂度： O(n) = logm &#43; n/m。cpp实现st...</description>
    </item>
    
    <item>
      <title>算法-二分/折半查找</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86-%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 25 Nov 2018 17:33:44 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86-%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/</guid>
      <description>二分/折半查找思路前提： 数组必须是已经排好序的有序数组。假设数组为升序排列，把数组一分为二，取中间点mid做比较，如果比mid大, 那么继续在[mid&#43;1,last]中查找，反之在[first,mid-1]中查找，对子数组继续进行上述操作,直到找到。算法复杂度    平均算法复杂度为： O(n) = logn；最坏情况的算法复杂度为： O(n) = logn;cpp实现...</description>
    </item>
    
    <item>
      <title>算法-顺序搜索</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Sun, 25 Nov 2018 17:30:44 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2/</guid>
      <description>顺序查找思路从数组的开头到结尾,顺序挨个比较查找。算法复杂度    平均算法复杂度为：O(n)= n; 最坏情况的算法复杂度为：O(n) = n;cpp实现int orderSearch(int dest_arr[],int  dest) {    int arr_len = sizeof(dest_arr)/sizeof(*dest_arr);    for(int ...</description>
    </item>
    
    <item>
      <title>算法-  快速排序</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 25 Nov 2018 16:19:00 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-11-25-%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>快速排序思路选定一个pivot, 移动元素使得pivot左右两边的元素，一边大于pivot, 一边小于pivot, 然后分别对左右两边递归进行同样的操作，最后得到一个有序排列。复杂度    快速排序的最坏时间复杂度为: O(n) = n^2，但平均复杂度为： O(n) = nlogncpp实现template &amp;amp;lt;class Type&amp;amp;gt;void Swap(...</description>
    </item>
    
    <item>
      <title>Mime-一个随机模拟useragent库</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-05-16-mime-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%A8%A1%E6%8B%9Fuseragent%E5%BA%93/</link>
      <pubDate>Wed, 16 May 2018 19:31:49 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-05-16-mime-%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%A8%A1%E6%8B%9Fuseragent%E5%BA%93/</guid>
      <description>Mime     Mime 是一个随机模拟 useragent 的库。 它可以用来作为反反爬的工具，用来躲过一些 通过 useragent 的反爬手段。需求&amp;amp;amp;amp;gt;= php7.1https://www.useragentstring.com  Mime 的 useragent 数据来源于 https://www.useragentstring.com安装...</description>
    </item>
    
    <item>
      <title>自制爬虫框架－Pider框架快速开始</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-05-06-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sun, 06 May 2018 13:05:31 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-05-06-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</guid>
      <description>快速使用 项目的基本结构运行爬虫数据处理示例基本用法响应处理多进程快速使用项目的基本结构//项目根目录|-- Config  //配置文件|-- LICENSE|-- README.md|-- composer.json|-- composer.lock|-- examples //示例|-- install.sh //安装脚本|...</description>
    </item>
    
    <item>
      <title>自制爬虫框架－Pider框架安装</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-05-04-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 04 May 2018 22:43:51 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-05-04-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85/</guid>
      <description>安装 需求安装安装需求PHP &amp;amp;gt;= 7.1pcntl(可选，多进程需要)安装git clone https://github.com/duanqiaobb/pider.gitgit submodule update --init --recursive//安装composer,如果出现问题，请参考 [composer官方文档]...</description>
    </item>
    
    <item>
      <title>自制爬虫框架－Pider框架介绍</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-05-04-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 04 May 2018 20:22:48 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-05-04-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</guid>
      <description>介绍 动机特性介绍   Pider 框架的目的是用PHP创建一个优雅的，可靠的，有用的爬虫框架。动机     毫无疑问， PHP 是一个很好的web编程语言。社区里面，各种web开发框架 也层出不穷，但是爬虫和数据处理框架却寥寥无几，而好用的几乎没有。我相信不仅仅只是可以在web领域大 放光彩，也可以在可以在数据处理和爬虫方面有所作为，就好像Python。所...</description>
    </item>
    
    <item>
      <title>自制爬虫框架－Pider框架简介</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-05-04-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 04 May 2018 11:39:18 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-05-04-%E8%87%AA%E5%88%B6%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6pider%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</guid>
      <description>简介 Pider是什么？当前版本和状态文档简介Pider是什么？     Pider是一个优雅，强大，模板化的爬虫框架。Pider想要 在数据采集方面给PHP社区提供更加方便，快捷的工具和框架。当前版本和状态1.0 (开发中)文档     详细的使用用法，请参考文档。  如果你对本项目感兴趣, 或者觉得对你有用，可以在...</description>
    </item>
    
    <item>
      <title>Scrapy框架——安装Scrapy</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2018-01-07-scrapy%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85scrapy/</link>
      <pubDate>Sun, 07 Jan 2018 19:44:00 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2018-01-07-scrapy%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85scrapy/</guid>
      <description>Scrapy框架—— 安装Scrapy 需求配置安装sqlite依赖库编译python3.6编译Twisted安装Scrapy测试Scrapy是否成功安装Scrapy框架—— 安装Scrapy   Scrapy 可以说是爬虫界鼎鼎有名的框架。 它是一个重型的爬虫框架，结合数据抓取，导出，以及部分的数据清洗的功能。本文针在python3.6的环境下来安装scra</description>
    </item>
    
    <item>
      <title>或许我们其实并不懂歪果仁</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2017-09-09-%E6%88%96%E8%AE%B8%E6%88%91%E4%BB%AC%E5%85%B6%E5%AE%9E%E5%B9%B6%E4%B8%8D%E6%87%82%E6%AD%AA%E6%9E%9C%E4%BB%81/</link>
      <pubDate>Sat, 09 Sep 2017 23:35:03 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2017-09-09-%E6%88%96%E8%AE%B8%E6%88%91%E4%BB%AC%E5%85%B6%E5%AE%9E%E5%B9%B6%E4%B8%8D%E6%87%82%E6%AD%AA%E6%9E%9C%E4%BB%81/</guid>
      <description>这首英文诗，原来是在百度百家号上面看的，看到挺有意思的就去查了下, 没想到真的有这首诗。  真的有趣啊，想我们初中，和高中学英文的那种纠结和痛苦，那时，真的回想，要是我是个外国人多好，那样就不要每天操蛋的学习英文了。  现在想想,看来那时还是太年轻，没有明白外国人真正的烦恼，”中国有美食的省份太多，记都记不住啦，好烦！”(偷笑…), 还居然专门写了首诗，原谅我忍不住笑了。原诗Have they</description>
    </item>
    
    <item>
      <title>Graphivz中文显示问题</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2017-05-12-graphivz%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 12 May 2017 14:30:39 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2017-05-12-graphivz%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</guid>
      <description>Graphviz  （相关详细教程请点击进入官网）是基于dot语言的绘图工具，可以画有向图，无向图，关系图，目录图，流程图等。在使用过程中，发现 Graphivz 对 中文的支持还是不够，容易出现各种各样的问题。中文乱码问题   这种问题，很多人都遇到过，因为 Graphivz 默认是不支持中文的，所以如果直接写中文的画，会显示成乱码，一般这种情况可以修改文件的编码 格式为 UTF-8 , 然后</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中的复数</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2017-04-27-c&#43;&#43;%E4%B8%AD%E7%9A%84%E5%A4%8D%E6%95%B0/</link>
      <pubDate>Thu, 27 Apr 2017 19:30:33 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2017-04-27-c&#43;&#43;%E4%B8%AD%E7%9A%84%E5%A4%8D%E6%95%B0/</guid>
      <description>C&#43;&#43;中的复数   C&#43;&#43;中的复数操作在C语言基础上引进了面向对象的特性，在 C&#43;&#43; 头文件在 complex 中定义了一个 complex 类用来表示复数。同时为了兼容 C 的 complex 类型，也提供了一个 complex.h 的头文件。 不同的是，在 complex.h 头文件中， complex 关键字被废弃，只能使用 _Complex 和 __complex__ 来使用 C风格的复数形</description>
    </item>
    
    <item>
      <title>C语言中的复数</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2017-04-27-c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%A4%8D%E6%95%B0/</link>
      <pubDate>Thu, 27 Apr 2017 11:10:59 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2017-04-27-c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%A4%8D%E6%95%B0/</guid>
      <description>C语言中的复数操作   复数在数学运算中十分重要，在编写数值运算或者算法的时候，我们会用到复数这种概念。 那么，复数在C/C&#43;&#43;语言中是如何表示的呢？我们接下来一一介绍。C语言中复数   在数学中一个复数可以定义为 (z=a &#43; bi) 的形式。 C 语言在 ISO C99 时就引入了复数类型。它是通过 complex.h 中定义的。 我们可以使用 complex , __complex__ ,</description>
    </item>
    
    <item>
      <title>Makefile快速入门</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2017-04-23-makefile%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 23 Apr 2017 13:59:34 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2017-04-23-makefile%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <description>Make是一个可扩展性极强的编译构建工具，将它和相关语言的编译器结合起来，我们几乎可以用它来 编译构建任何编程语言程序。 Makefile的基本语法结构   make主要是通过默认的 Makefile 或 makefile 的配置文件(下文统一称 makefile )中的规则来构建项目的。 makefile 其实是有无数的规则组成的。 我们可以用这些规则来编译，链接，以及运行相关命令和脚本。这些规则</description>
    </item>
    
    <item>
      <title>软件工程系列- 详细设计</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-22-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 22 Jun 2016 16:27:19 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-22-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/</guid>
      <description>目录概述过程设计工具过程设计中程序复杂度的度量概述详细设计阶段是逻辑上将系统的每个功能都设计出来，并保证设计出的处理过程应该尽可能的简明易懂。  结构化程序设计定义: 如果一个程序的代码块仅仅通过顺序、选择和循环这3种基本控制进行连接，并且只有一个入口和一个出口，则称这个程序是结构化的。结构化程序设计的3种基本结构: 顺序、选择、循环。过程设计工具  程序流程图定义: 程序流程图又</description>
    </item>
    
    <item>
      <title>数学建模系列- 解决Matlab读取Excel文件报错:Could not start Excel server for import问题</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-20-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%B3%BB%E5%88%97-%E8%A7%A3%E5%86%B3matlab%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99could-not-start-excel-server-for-import%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jun 2016 19:28:16 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-20-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%B3%BB%E5%88%97-%E8%A7%A3%E5%86%B3matlab%E8%AF%BB%E5%8F%96excel%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99could-not-start-excel-server-for-import%E9%97%AE%E9%A2%98/</guid>
      <description>今天在进行Matlab编程的时，用之前写的代码在自己机子上运行失败，报错为Could not start Excel server for import, 十分郁闷。于是在网上找了些资料，总算解决了问题，现在将几种解决方法写下来，希望能够帮助遇到同样问题的朋友。情况一： 软件版本兼容问题首先考虑是Matlab和Excel的兼容问题，我遇到的就是两个软件的兼容性问题，我Matlab装的是2010a版</description>
    </item>
    
    <item>
      <title>数学建模系列-数学建模那些事</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-20-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%B3%BB%E5%88%97-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Mon, 20 Jun 2016 16:33:38 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-20-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%B3%BB%E5%88%97-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>数学建模的概念:        所谓的数学建模就是使用数学框架解决实际应用问题,数学建模在解决问题的同时能够培养      1. 数学思维能力，      2. 分析问题本质的能力，      3. 团队合作的能力，      4. 资料检索的能力，      5. 编程能力，      6. 论文写作的能力。数学建模中的典型方法蒙特卡罗算法数据拟合、参数估计、插值等数据处理算法(</description>
    </item>
    
    <item>
      <title>Oracle数据库系列 - Oracle 表空间管理</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-17-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97-oracle-%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 17 Jun 2016 20:11:42 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-17-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97-oracle-%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/</guid>
      <description>创建表空间    CREATE [ TEMPORARY | UNDO ] TALBESPACE tablespace_name    [       DATAFILE | TEMPFILE &amp;#39;file_name&amp;#39; SIZE size K | M [ REUSE ]       [          AUTOEXTEND OFF | ON          [NEXT number K |</description>
    </item>
    
    <item>
      <title>Oracle 数据库系列 - SQL Plus SQL操作命令</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-17-oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97-sql-plus-sql%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 17 Jun 2016 17:39:28 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-17-oracle-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97-sql-plus-sql%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</guid>
      <description>Oracle数据库系列- SQL Plus SQL操作命令  Oracle数据库的连接方式有很多中，你可以采用PL/SQL，Oracle SQL Developer 这样的工具进行数据库连接。   但是如果你更倾向于命令行的话，也可以用sqlplus(Oracle数据库自带的命令行工具)进行数据库SQL操作, sql plus    本身就十分强大，几乎可以完成数据库操作的所有功能。连接数据</description>
    </item>
    
    <item>
      <title>Oracle数据库系列-Oracle数据库开场篇</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-16-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%9C%BA%E7%AF%87/</link>
      <pubDate>Thu, 16 Jun 2016 16:05:59 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-16-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E5%88%97-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%9C%BA%E7%AF%87/</guid>
      <description>Oracle数据库系列- 开场篇  Oracle数据库是数据库系统中的佼佼者，其完整性、安全性、和一致性等优点深受广大企业的青睐。Oracle数据库继承了无数多的功能，为开发者提供和不少的便利的特性。但是由于Oracle数据库庞大而繁杂的功能，导致学习Oracle数据库的难度上升不少，也同时让许多的开发者望而止步。  这一系列博客记录我在学习Oracle数据库过程中的一些心得，与大家一起分享。如果</description>
    </item>
    
    <item>
      <title>软件工程系列 -软件开发形式化说明技术</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-16-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%BD%A2%E5%BC%8F%E5%8C%96%E8%AF%B4%E6%98%8E%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Thu, 16 Jun 2016 11:40:30 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-16-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%BD%A2%E5%BC%8F%E5%8C%96%E8%AF%B4%E6%98%8E%E6%8A%80%E6%9C%AF/</guid>
      <description>形式化说明技术  形式化方法就是基于数学的技术描述系统的性质,消除自然语言书写的系统规格说明书的   矛盾、二义性、含糊性、不完整性、及抽象层次混乱性。有穷状态机  有穷状态机包括下述的5个部分: 状态集J、输入集K、由当前状态和当前输入确定下个状态(次态)的转换函数T、初始态S、和终态集F。转换规则为:当前状态[菜单]&#43;事件[所选择的项]=&amp;gt;下个状态    有穷状态集的扩充：在上述的5个</description>
    </item>
    
    <item>
      <title>软件工程系列-软件开发的需求分析</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-15-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 15 Jun 2016 22:04:50 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-15-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</guid>
      <description>软件工程系列- 软件开发的需求分析   软件开发过程中需求分析是获得用户的真实需求的一个重要阶段，这一阶段，软件开发人员通过和用户的沟通，从中获取软件怎样完成它的工作的详细信息，了解目标软件系统的完整、准确、清晰、具体的要求。  软件需求分析中的与客户沟通获取需求的方法访谈向被调查人分发调查表情景分析技术  软件需求分析中的工具层次方框图Warnier图数据流图(功能模型)实体联系图状</description>
    </item>
    
    <item>
      <title>软件工程系列- 软件开发的可行性研究</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-15-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Wed, 15 Jun 2016 12:09:03 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-15-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/</guid>
      <description>软件工程系列 - 软件开发的可行性&amp;lt;分析/strong&amp;gt;  软件开发过程中的可行性是指，软件开发过程中，在各种软件开发环境下，用最小的代价在尽可能短的时间内确认问题是否能够解决。  软件可行性一般可以从这几个方面进行分析：技术可行性(现有的技术是否能够实现)经济可行性(经济效益是否能超过它的开发成本)操作可行性(操作方式能否在组织中行得通)社会可行性(法律，社会效益中能否可行)  软件可行性</description>
    </item>
    
    <item>
      <title>软件工程系列- 软件开发模型</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-15-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 15 Jun 2016 12:08:05 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-15-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid>
      <description>软件工程系列-  软件开发模型  软件开发模型(Software Development Model)是指软件开发全部过程、活动和任务的结构框架。软件开发包括需求、设计、编码和测试等阶段，有时也包括维护阶段。 软件开发模型能清晰、直观地表达软件开发全过程，明确规定了要完成的主要活动和任务，用来作为软件项目工作的基础。对于不同的软件系统，可以采用不同的开发方法、使用不同的程序设计语言以及各种不同技能</description>
    </item>
    
    <item>
      <title>软件工程系列-介绍, 软件工程的那些事</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-13-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Mon, 13 Jun 2016 23:38:46 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-13-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%BB%8B%E7%BB%8D-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>软件工程系列- 关于软件工程的那些事  软件工程是将现有的工程系统的概念、原理、技术 、和方法应用到软件开发领域，以达到使软件开发过程系统，规范，可度量。简单来说，软件工程就是贯穿软件开发过程中的方法论。软件工程的基本原理软件生命周期分阶段严格管理阶段评审严格的产品控制采用更先进的现代程序设计技术结果应能清楚地审查少而精的开发人员采用新的软件技术进行不断改进软件工程的方法学结构</description>
    </item>
    
    <item>
      <title>WordPress 系列- WordPress 部署期间遇到的问题和坑</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-12-wordpress-%E7%B3%BB%E5%88%97-wordpress-%E9%83%A8%E7%BD%B2%E6%9C%9F%E9%97%B4%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E5%9D%91/</link>
      <pubDate>Sun, 12 Jun 2016 17:22:12 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-12-wordpress-%E7%B3%BB%E5%88%97-wordpress-%E9%83%A8%E7%BD%B2%E6%9C%9F%E9%97%B4%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E5%9D%91/</guid>
      <description>WordPress 系列- WordPress 部署期间遇到的问题和坑  这篇文章记录了我在研究WordPress中的遇到过的小问题，因为问题比较小，解决方法可能也就一句话，我就用一篇文章来记录他们。WordPress文章链接形式设置为伪静态形式，造成链接失效在WordPress中链接的默认形式为日期&#43;文章标题的形式，比如你的一篇文章标题为:Hello WordPress 那么WordPress</description>
    </item>
    
    <item>
      <title>WordPress系列-开场白</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-12-wordpress%E7%B3%BB%E5%88%97-%E5%BC%80%E5%9C%BA%E7%99%BD/</link>
      <pubDate>Sun, 12 Jun 2016 12:55:23 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-12-wordpress%E7%B3%BB%E5%88%97-%E5%BC%80%E5%9C%BA%E7%99%BD/</guid>
      <description>WordPress的浅显研究  最近在研究wordpress,于是开了这个系列文章，这些文章记录了我在学习wordpress过程   中的心得，以及踩过的坑。</description>
    </item>
    
    <item>
      <title>Linux的运行级别初探</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-06-09-linux%E7%9A%84%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Thu, 09 Jun 2016 16:50:05 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-06-09-linux%E7%9A%84%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E5%88%9D%E6%8E%A2/</guid>
      <description>Linux的运行级别初探Linux的运行级别分为6个运行级别,分别为:    0   停机  1   单用户(无网络连接,只开启少量的进程,准许非root用户登录)  2   多用户(无网络连接,只开启少量的进程)  3   多用户(启动网络连接) 一般默认以这个模式启动  4   用户自定义  5   多用户带图形界面  6   重启</description>
    </item>
    
    <item>
      <title>vim&#43;clipboard＋vim-gui(gvim)源码编译</title>
      <link>/blog/%E6%8A%80%E6%9C%AF/2016-01-01-vim&#43;clipboardvim-guigvim%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</link>
      <pubDate>Fri, 01 Jan 2016 18:02:23 +0000</pubDate>
      
      <guid>/blog/%E6%8A%80%E6%9C%AF/2016-01-01-vim&#43;clipboardvim-guigvim%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</guid>
      <description>昨天因为系统中自带的vim中没有clipboard特性,别的程序到vim中粘贴复制内容比较别扭。于是就（ˇˍˇ）　想～从重新编译一个完整版本的vim。于是就倒弄了一天。。。。。。　　　　　　   首先先贴下环境：Fedora 22 &#43;gcc 5.3.1版本＋vim74源码包首先下载vim74源码包,这个可以到vim.org官网下载,这里我贴出linux需要下载的版本(也是我下载的版本)的链接:h</description>
    </item>
    
  </channel>
</rss>
